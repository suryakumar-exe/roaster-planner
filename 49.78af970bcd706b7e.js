"use strict";(self.webpackChunkroaster_planner=self.webpackChunkroaster_planner||[]).push([[49],{3049:(ve,b,d)=>{d.r(b),d.d(b,{RosterPlannerComponent:()=>he});var g=d(177),D=d(4341),e=d(4438),F=d(7474),v=d(7673),p=d(3286);let R=(()=>{class a{constructor(t){this.jsonDatabaseService=t}getHolidays(){return(0,v.of)(this.jsonDatabaseService.getHolidays())}getHolidayById(t){const s=this.jsonDatabaseService.getHolidays().find(o=>o.id===t)||null;return(0,v.of)(s)}createHoliday(t){const r=this.jsonDatabaseService.createHoliday(t);return(0,v.of)(r)}updateHoliday(t,r){const s=this.jsonDatabaseService.updateHoliday(t,r);return(0,v.of)(s)}deleteHoliday(t){const r=this.jsonDatabaseService.deleteHoliday(t);return(0,v.of)(r)}static{this.\u0275fac=function(r){return new(r||a)(e.KVO(p.d))}}static{this.\u0275prov=e.jDH({token:a,factory:a.\u0275fac,providedIn:"root"})}}return a})();var w=d(9478),_=d(4796),S=d(5794);function E(a,n){if(1&a&&(e.j41(0,"span",78),e.EFF(1),e.nI1(2,"date"),e.k0s()),2&a){const t=n.$implicit;e.R7$(),e.SpI(" ",e.i5U(2,1,t,"EEE")," ")}}function j(a,n){if(1&a&&(e.j41(0,"span",79),e.EFF(1),e.nI1(2,"date"),e.k0s()),2&a){const t=n.$implicit;e.R7$(),e.SpI(" ",e.i5U(2,1,t,"EEE")," ")}}function O(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",80),e.bIt("click",function(){e.eBV(t);const s=e.XpG().$implicit,o=e.XpG(2);return e.Njj(o.approveRoster(s.id))}),e.nrm(1,"i",81),e.EFF(2," Approve "),e.k0s()}}function $(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",82),e.bIt("click",function(){e.eBV(t);const s=e.XpG().$implicit,o=e.XpG(2);return e.Njj(o.rejectRoster(s.id))}),e.nrm(1,"i",83),e.EFF(2," Reject "),e.k0s()}}function W(a,n){if(1&a){const t=e.RV6();e.j41(0,"tr")(1,"td"),e.EFF(2),e.k0s(),e.j41(3,"td"),e.EFF(4),e.k0s(),e.j41(5,"td"),e.DNE(6,E,3,4,"span",70),e.k0s(),e.j41(7,"td"),e.DNE(8,j,3,4,"span",71),e.k0s(),e.j41(9,"td")(10,"span",72),e.EFF(11),e.k0s()(),e.j41(12,"td")(13,"div",73)(14,"button",74),e.bIt("click",function(){const s=e.eBV(t).$implicit,o=e.XpG(2);return e.Njj(o.viewAllRoster(s))}),e.nrm(15,"i",75),e.EFF(16," View "),e.k0s(),e.DNE(17,O,3,0,"button",76)(18,$,3,0,"button",77),e.k0s()()()}if(2&a){const t=n.$implicit;e.R7$(2),e.JRh(t.userName),e.R7$(2),e.JRh(t.teamName),e.R7$(2),e.Y8G("ngForOf",t.workFromOfficeDays),e.R7$(2),e.Y8G("ngForOf",t.workFromHomeDays),e.R7$(2),e.AVh("bg-secondary","Draft"===t.status)("bg-warning","Submitted"===t.status)("bg-success","Approved"===t.status)("bg-danger","Rejected"===t.status),e.R7$(),e.SpI(" ",t.status," "),e.R7$(6),e.Y8G("ngIf","Submitted"===t.status),e.R7$(),e.Y8G("ngIf","Submitted"===t.status)}}function C(a,n){1&a&&(e.j41(0,"div",84),e.nrm(1,"i",85),e.j41(2,"p",86),e.EFF(3,"No rosters found for this week"),e.k0s()())}function I(a,n){if(1&a&&(e.j41(0,"div",1)(1,"div",2)(2,"div",11)(3,"div",12)(4,"h5",13),e.EFF(5,"All Employee Rosters"),e.k0s()(),e.j41(6,"div",14)(7,"div",66)(8,"table",67)(9,"thead")(10,"tr")(11,"th"),e.EFF(12,"Employee"),e.k0s(),e.j41(13,"th"),e.EFF(14,"Team"),e.k0s(),e.j41(15,"th"),e.EFF(16,"WFO Days"),e.k0s(),e.j41(17,"th"),e.EFF(18,"WFH Days"),e.k0s(),e.j41(19,"th"),e.EFF(20,"Status"),e.k0s(),e.j41(21,"th"),e.EFF(22,"Actions"),e.k0s()()(),e.j41(23,"tbody"),e.DNE(24,W,19,15,"tr",68),e.k0s()()(),e.DNE(25,C,4,0,"div",69),e.k0s()()()()),2&a){const t=e.XpG();e.R7$(24),e.Y8G("ngForOf",t.allRosters),e.R7$(),e.Y8G("ngIf",0===t.allRosters.length)}}function H(a,n){1&a&&(e.j41(0,"div",21)(1,"div",87)(2,"div",88)(3,"span",89),e.EFF(4,"Loading..."),e.k0s()(),e.j41(5,"p",86),e.EFF(6,"Loading roster data..."),e.k0s()()())}function T(a,n){if(1&a&&(e.j41(0,"div",22)(1,"div",23)(2,"div",90),e.EFF(3),e.k0s()(),e.j41(4,"strong",91),e.EFF(5,"Work From Home"),e.k0s()()),2&a){const t=e.XpG();e.R7$(2),e.xc7("width",t.workFromHomeDays.length/t.getRequiredWFH()*100,"%"),e.R7$(),e.Lme(" ",t.workFromHomeDays.length,"/",t.getRequiredWFH()," ")}}function M(a,n){1&a&&(e.j41(0,"div",92),e.EFF(1," No WFO days selected "),e.k0s())}function L(a,n){if(1&a&&(e.j41(0,"div",93)(1,"span",94),e.EFF(2),e.nI1(3,"date"),e.k0s()()),2&a){const t=n.$implicit;e.R7$(2),e.JRh(e.i5U(3,1,t,"EEE, MMM dd"))}}function P(a,n){1&a&&(e.j41(0,"div",92),e.EFF(1," No WFH days selected "),e.k0s())}function A(a,n){if(1&a&&(e.j41(0,"div",93)(1,"span",95),e.EFF(2),e.nI1(3,"date"),e.k0s()()),2&a){const t=n.$implicit;e.R7$(2),e.JRh(e.i5U(3,1,t,"EEE, MMM dd"))}}function N(a,n){1&a&&(e.j41(0,"div",92),e.EFF(1," No leave days selected "),e.k0s())}function G(a,n){1&a&&(e.j41(0,"small"),e.EFF(1,"(Approved)"),e.k0s())}function x(a,n){if(1&a&&(e.j41(0,"div",93)(1,"span",96),e.EFF(2),e.nI1(3,"date"),e.DNE(4,G,2,0,"small",52),e.k0s()()),2&a){const t=n.$implicit,r=e.XpG();e.R7$(),e.Y8G("ngClass",r.isLeaveFromLeaveManagement(t)?"bg-info":"bg-warning"),e.R7$(),e.SpI(" ",e.i5U(3,3,t,"EEE, MMM dd")," "),e.R7$(2),e.Y8G("ngIf",r.isLeaveFromLeaveManagement(t))}}function Y(a,n){if(1&a&&(e.j41(0,"li"),e.EFF(1),e.k0s()),2&a){const t=n.$implicit;e.R7$(),e.JRh(t)}}function U(a,n){if(1&a&&(e.j41(0,"div",45)(1,"div",2)(2,"div",97)(3,"small"),e.nrm(4,"i",98),e.EFF(5,"Please fix the following:"),e.k0s(),e.j41(6,"ul",99),e.DNE(7,Y,2,1,"li",68),e.k0s()()()()),2&a){const t=e.XpG();e.R7$(7),e.Y8G("ngForOf",t.validationMessages)}}function V(a,n){1&a&&(e.j41(0,"div",45)(1,"div",2)(2,"div",100)(3,"small"),e.nrm(4,"i",101),e.EFF(5,"Your roster is ready to submit!"),e.k0s()()()())}function X(a,n){1&a&&(e.j41(0,"span",112),e.EFF(1,"Holiday"),e.k0s())}function B(a,n){1&a&&(e.j41(0,"span",113),e.EFF(1,"Weekend"),e.k0s())}function q(a,n){1&a&&(e.j41(0,"span",94),e.EFF(1,"WFO"),e.k0s())}function J(a,n){1&a&&(e.j41(0,"span",95),e.EFF(1,"WFH"),e.k0s())}function z(a,n){if(1&a&&(e.j41(0,"span",96),e.EFF(1),e.k0s()),2&a){const t=e.XpG().$implicit,r=e.XpG();e.Y8G("ngClass",r.isLeaveFromLeaveManagement(t.date)?"bg-info":"bg-warning"),e.R7$(),e.SpI(" ",r.isLeaveFromLeaveManagement(t.date)?"Approved Leave":"Leave"," ")}}function K(a,n){1&a&&(e.j41(0,"span",114),e.EFF(1,"Click to assign"),e.k0s())}function Q(a,n){if(1&a){const t=e.RV6();e.j41(0,"div",102)(1,"div",103),e.bIt("click",function(){const s=e.eBV(t).$implicit,o=e.XpG();return e.Njj(!o.isHoliday(s.date)&&!o.isWeekend(s.date)&&o.toggleDay(s.date))}),e.j41(2,"div",104)(3,"strong"),e.EFF(4),e.nI1(5,"date"),e.k0s(),e.j41(6,"small"),e.EFF(7),e.nI1(8,"date"),e.k0s()(),e.j41(9,"div",105),e.DNE(10,X,2,0,"span",106)(11,B,2,0,"span",107)(12,q,2,0,"span",108)(13,J,2,0,"span",109)(14,z,2,2,"span",110)(15,K,2,0,"span",111),e.k0s()()()}if(2&a){const t=n.$implicit,r=e.XpG();e.R7$(),e.AVh("holiday",r.isHoliday(t.date))("weekend",r.isWeekend(t.date))("selected-wfo",r.isWorkFromOffice(t.date))("selected-wfh",r.isWorkFromHome(t.date))("selected-leave",r.isLeaveDay(t.date)),e.R7$(3),e.JRh(e.i5U(5,18,t.date,"EEE")),e.R7$(3),e.JRh(e.i5U(8,21,t.date,"MMM dd")),e.R7$(3),e.Y8G("ngIf",r.isHoliday(t.date)),e.R7$(),e.Y8G("ngIf",r.isWeekend(t.date)),e.R7$(),e.Y8G("ngIf",!r.isHoliday(t.date)&&!r.isWeekend(t.date)&&r.isWorkFromOffice(t.date)),e.R7$(),e.Y8G("ngIf",!r.isHoliday(t.date)&&!r.isWeekend(t.date)&&r.isWorkFromHome(t.date)),e.R7$(),e.Y8G("ngIf",!r.isHoliday(t.date)&&!r.isWeekend(t.date)&&r.isLeaveDay(t.date)),e.R7$(),e.Y8G("ngIf",!(r.isHoliday(t.date)||r.isWeekend(t.date)||r.isWorkFromOffice(t.date)||r.isWorkFromHome(t.date)||r.isLeaveDay(t.date)))}}function Z(a,n){1&a&&(e.j41(0,"div"),e.nrm(1,"i",115),e.j41(2,"strong"),e.EFF(3,"Roster Submitted Successfully!"),e.k0s(),e.nrm(4,"br"),e.j41(5,"small"),e.EFF(6,"Your roster has been submitted and is pending approval."),e.k0s()())}function ee(a,n){1&a&&(e.j41(0,"div"),e.nrm(1,"i",116),e.j41(2,"strong"),e.EFF(3,"Draft Saved"),e.k0s(),e.nrm(4,"br"),e.j41(5,"small"),e.EFF(6,'Your roster is saved as a draft. Click "Submit Roster" when ready.'),e.k0s()())}function te(a,n){1&a&&(e.j41(0,"div"),e.nrm(1,"i",117),e.j41(2,"strong"),e.EFF(3,"Roster Approved"),e.k0s(),e.nrm(4,"br"),e.j41(5,"small"),e.EFF(6,"Your roster has been approved by your manager."),e.k0s()())}function se(a,n){1&a&&(e.j41(0,"div"),e.nrm(1,"i",118),e.j41(2,"strong"),e.EFF(3,"Roster Rejected"),e.k0s(),e.nrm(4,"br"),e.j41(5,"small"),e.EFF(6,"Your roster has been rejected. Please review and resubmit."),e.k0s()())}function re(a,n){1&a&&(e.j41(0,"div"),e.nrm(1,"i",119),e.j41(2,"strong"),e.EFF(3,"No Roster Found"),e.k0s(),e.nrm(4,"br"),e.j41(5,"small"),e.EFF(6,"Create your roster for this week by assigning days below."),e.k0s()())}function ae(a,n){1&a&&(e.j41(0,"div",45)(1,"div",2)(2,"div",50)(3,"div",120),e.nrm(4,"i",121),e.j41(5,"strong"),e.EFF(6,"System Generated Roster"),e.k0s(),e.nrm(7,"br"),e.j41(8,"small"),e.EFF(9,"This roster was automatically created by the system due to missed submission deadline."),e.k0s()()()()())}function oe(a,n){if(1&a&&(e.j41(0,"li"),e.EFF(1),e.k0s()),2&a){const t=n.$implicit;e.R7$(),e.JRh(t)}}function ne(a,n){if(1&a&&(e.j41(0,"div",45)(1,"div",2)(2,"div",122)(3,"h6"),e.EFF(4,"Please fix the following issues:"),e.k0s(),e.j41(5,"ul",18),e.DNE(6,oe,2,1,"li",68),e.k0s()()()()),2&a){const t=e.XpG();e.R7$(6),e.Y8G("ngForOf",t.validationMessages)}}function ie(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",123),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.submitRoster())}),e.nrm(1,"i",124),e.EFF(2," Submit Roster "),e.k0s()}if(2&a){const t=e.XpG();e.Y8G("disabled",!t.canSubmit())}}function le(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",125),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.saveDraft())}),e.nrm(1,"i",126),e.EFF(2," Save Draft "),e.k0s()}}function ce(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",8),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.applyDefaultSchedule())}),e.nrm(1,"i",127),e.EFF(2," Apply Business Rules "),e.k0s()}}function de(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",6),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.copyFromPreviousWeek())}),e.nrm(1,"i",63),e.EFF(2," Copy Previous Week "),e.k0s()}}function ue(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",64),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.viewMyRoster())}),e.nrm(1,"i",75),e.EFF(2," View Submitted Roster "),e.k0s()}}function me(a,n){if(1&a){const t=e.RV6();e.j41(0,"button",128),e.bIt("click",function(){e.eBV(t);const s=e.XpG();return e.Njj(s.resubmitRoster())}),e.nrm(1,"i",129),e.EFF(2," Resubmit Roster "),e.k0s()}}let he=(()=>{class a{constructor(t,r,s,o,l,i){this.rostersService=t,this.holidaysService=r,this.leavesService=s,this.authService=o,this.toastr=l,this.cdr=i,this.currentRoster=null,this.teamMemberRosters=[],this.allRosters=[],this.weekDays=[],this.workFromOfficeDays=[],this.workFromHomeDays=[],this.leaveDays=[],this.rosterAssignedLeaves=[],this.leaveManagementLeaves=[],this.holidays=[],this.validationMessages=[],this.isLoading=!1,this.weekStartDate=new Date,this.weekEndDate=new Date,this.initializeWeek()}ngOnInit(){this.loadHolidays(),this.loadCurrentRoster(),this.loadTeamMemberRosters(),this.loadAllRosters()}getRoleSpecificMessage(){return this.authService.isAdmin()?"View and manage all employee rosters. You can approve or reject submitted rosters.":this.authService.isTeamLead()?"View your team members' rosters and manage your own roster.":"Plan your work schedule for the week. Select exactly 3 WFO days and 2 WFH days. Your roster will be automatically submitted."}initializeWeek(){const t=new Date,r=t.getDay(),s=t.getDate()-r+(0===r?-6:1);this.weekStartDate=new Date(t.setDate(s)),this.weekEndDate=new Date(this.weekStartDate),this.weekEndDate.setDate(this.weekStartDate.getDate()+6),this.generateWeekDays()}generateWeekDays(){this.weekDays=[];const t=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];for(let r=0;r<7;r++){const s=new Date(this.weekStartDate);s.setDate(this.weekStartDate.getDate()+r),this.weekDays.push({name:t[r],date:s.toISOString().split("T")[0]})}}loadHolidays(){this.holidaysService.getHolidays().subscribe({next:t=>{this.holidays=Array.isArray(t)?t:t.data||[]},error:t=>{console.error("Error loading holidays:",t)}})}loadCurrentRoster(){const t=this.authService.getCurrentUser();if(!t)return void console.error("No current user found");this.isLoading=!0;const r=this.weekStartDate.toISOString().split("T")[0],s=this.weekEndDate.toISOString().split("T")[0];console.log("Loading current roster for week:",r,"to",s),console.log("Current user ID:",t.id),this.rostersService.getRosters().subscribe({next:o=>{const l=Array.isArray(o)?o:o.data||[];console.log("All rosters from service:",l),this.currentRoster=l.find(i=>{const c=i.userId===t.id&&i.weekStartDate===r;return console.log("Checking roster:",i.id,"User ID:",i.userId,"Week Start:",i.weekStartDate,"Matches:",c),c})||null,console.log("Found current roster:",this.currentRoster),this.currentRoster?(this.workFromOfficeDays=this.currentRoster.workFromOfficeDays||[],this.workFromHomeDays=this.currentRoster.workFromHomeDays||[],this.leaveDays=this.currentRoster.leaveDays||[],this.rosterAssignedLeaves=this.currentRoster.leaveDays||[],this.leaveManagementLeaves=[],console.log("Loaded roster data:",{workFromOfficeDays:this.workFromOfficeDays,workFromHomeDays:this.workFromHomeDays,leaveDays:this.leaveDays,status:this.currentRoster.status})):(this.workFromOfficeDays=[],this.workFromHomeDays=[],this.leaveDays=[],this.rosterAssignedLeaves=[],this.leaveManagementLeaves=[],console.log("No roster found, cleared arrays")),this.loadLeavesForWeek(r,s),this.validateRoster(),this.isLoading=!1},error:o=>{console.error("Error loading roster:",o),this.workFromOfficeDays=[],this.workFromHomeDays=[],this.leaveDays=[],this.rosterAssignedLeaves=[],this.leaveManagementLeaves=[],this.isLoading=!1}})}loadLeavesForWeek(t,r){this.leavesService.getLeaves().subscribe({next:s=>{const o=Array.isArray(s)?s:s.data||[],l=this.authService.getCurrentUser(),i=o.filter(u=>{if(u.userId!==l?.id)return!1;const m=new Date(u.startDate),y=new Date(u.endDate),h=new Date(t);return m<=new Date(r)&&y>=h}),c=[];i.forEach(u=>{const m=new Date(u.startDate),y=new Date(u.endDate),h=new Date(t),f=new Date(r),fe=new Date(Math.max(m.getTime(),h.getTime())),ge=new Date(Math.min(y.getTime(),f.getTime())),k=new Date(fe);for(;k<=ge;)c.push(k.toISOString().split("T")[0]),k.setDate(k.getDate()+1)}),this.leaveManagementLeaves=c,this.rosterAssignedLeaves=this.rosterAssignedLeaves.filter(u=>!this.leaveManagementLeaves.includes(u)),this.leaveDays=[...this.leaveManagementLeaves,...this.rosterAssignedLeaves],this.leaveManagementLeaves.length>0&&this.toastr.info(`Loaded ${this.leaveManagementLeaves.length} applied leave(s) from leave management system`,"Leaves Updated"),this.validateRoster()},error:s=>{console.error("Error loading leaves:",s)}})}refreshAppliedLeaves(){const t=this.weekStartDate.toISOString().split("T")[0],r=this.weekEndDate.toISOString().split("T")[0];this.loadLeavesForWeek(t,r)}loadTeamMemberRosters(){if(this.authService.isTeamLead()&&!this.authService.isAdmin()){const t=this.weekStartDate.toISOString().split("T")[0];this.rostersService.getRosters().subscribe({next:r=>{const s=Array.isArray(r)?r:r.data||[];this.teamMemberRosters=s.filter(o=>o.weekStartDate===t&&o.userId!==this.authService.getCurrentUser()?.id&&"Employee"===o.role)},error:r=>{console.error("Error loading team member rosters:",r)}})}}loadAllRosters(){if(this.authService.isAdmin()){const t=this.weekStartDate.toISOString().split("T")[0];this.rostersService.getRosters().subscribe({next:r=>{const s=Array.isArray(r)?r:r.data||[];this.allRosters=s.filter(o=>o.weekStartDate===t)},error:r=>{console.error("Error loading all rosters:",r)}})}}isHoliday(t){return this.holidays.some(r=>r.date===t&&r.isActive)}isWeekend(t){const r=new Date(t).getDay();return 0===r||6===r}isWorkFromOffice(t){return this.workFromOfficeDays.includes(t)}isWorkFromHome(t){return this.workFromHomeDays.includes(t)}isLeaveDay(t){return this.leaveDays.includes(t)}toggleDay(t){if(this.isHoliday(t))return void this.toastr.warning("Cannot select public holidays");if(this.isLeaveFromLeaveManagement(t))return void this.toastr.warning("Cannot modify leave days that are from approved leave requests");if(this.currentRoster?.status&&"Draft"!==this.currentRoster.status)return void this.toastr.warning("Cannot modify roster after submission");const r=this.isWorkFromOffice(t),s=this.isWorkFromHome(t),o=this.isLeaveDay(t);this.workFromOfficeDays=this.workFromOfficeDays.filter(l=>l!==t),this.workFromHomeDays=this.workFromHomeDays.filter(l=>l!==t),this.leaveDays=this.leaveDays.filter(l=>l!==t),this.rosterAssignedLeaves=this.rosterAssignedLeaves.filter(l=>l!==t),r?this.workFromHomeDays.push(t):s?(this.leaveDays.push(t),this.rosterAssignedLeaves.push(t)):o||this.workFromOfficeDays.push(t),this.validateRoster()}isLeaveFromLeaveManagement(t){return this.leaveManagementLeaves.includes(t)}isRosterAssignedLeave(t){return this.rosterAssignedLeaves.includes(t)}getRequiredWFO(){const t=this.weekDays.filter(o=>{const l=new Date(o.date).getDay();return 0!==l&&6!==l&&!this.isHoliday(o.date)}),r=this.leaveDays.length;return 0===r||1===r||2===r?3:r>=3?t.length-r:3}getRequiredWFH(){const t=this.leaveDays.length;return 0===t?2:1===t?1:t>=2?0:2}getMinRequiredWFO(){return this.getRequiredWFO()}getMaxAllowedWFH(){return this.getRequiredWFH()}validateRoster(){this.validationMessages=this.checkValidation()}canSubmit(){return 0===this.checkValidation().length}checkValidation(){const t=[],s=this.weekDays.filter(h=>{const f=new Date(h.date).getDay();return 0!==f&&6!==f&&!this.isHoliday(h.date)}).length,o=this.leaveDays.length;let i=3,c=2;o>0&&(1===o?(i=3,c=1):2===o?(i=3,c=0):o>=3&&(i=s-o,c=0)),this.workFromOfficeDays.length<i&&t.push(`Need at least ${i} WFO days (currently ${this.workFromOfficeDays.length})`),c>0&&this.workFromHomeDays.length>c&&t.push(`Maximum ${c} WFH days allowed (currently ${this.workFromHomeDays.length})`);const u=this.workFromOfficeDays.length+this.workFromHomeDays.length+this.leaveDays.length;u!==s&&t.push(`Must assign all available work days (${s} total, currently ${u})`);const m=[...this.workFromOfficeDays,...this.workFromHomeDays,...this.leaveDays],y=new Set(m);return m.length!==y.size&&t.push("Days cannot be assigned to multiple categories"),t}submitRoster(){if(!this.canSubmit())return void this.toastr.error("Please fix validation issues before submitting");const t=this.authService.getCurrentUser();if(!t)return void this.toastr.error("User information not found");const r={weekStartDate:this.weekStartDate.toISOString().split("T")[0],weekEndDate:this.weekEndDate.toISOString().split("T")[0],workFromOfficeDays:this.workFromOfficeDays,workFromHomeDays:this.workFromHomeDays,leaveDays:this.leaveDays||[],userId:t.id,userName:`${t.firstName} ${t.lastName}`,email:t.email,role:t.role,teamId:t.teamId,teamName:t.teamName};console.log("Submitting roster with data:",r),console.log("Current roster before submission:",this.currentRoster),this.currentRoster?this.rostersService.updateRoster(this.currentRoster.id,{...r,status:"Submitted"}).subscribe({next:s=>{console.log("Roster update response:",s),this.toastr.success("Roster submitted successfully! Your manager will review it.","Success",{timeOut:5e3,extendedTimeOut:2e3}),this.currentRoster&&(this.currentRoster.status="Submitted",this.currentRoster.submittedAt=(new Date).toISOString()),this.loadCurrentRoster()},error:s=>{console.error("Error submitting roster:",s),this.toastr.error("Failed to submit roster. Please try again.","Error")}}):this.rostersService.createRoster({...r,leaveDays:r.leaveDays||[],status:"Submitted"}).subscribe({next:s=>{console.log("Roster creation response:",s),this.toastr.success("Roster submitted successfully! Your manager will review it.","Success",{timeOut:5e3,extendedTimeOut:2e3});const o=s.data||s;this.currentRoster={...o,id:o.id,userId:t.id,userName:`${t.firstName} ${t.lastName}`,email:t.email,role:t.role,teamId:t.teamId,teamName:t.teamName,weekStartDate:r.weekStartDate,weekEndDate:r.weekEndDate,workFromOfficeDays:r.workFromOfficeDays,workFromHomeDays:r.workFromHomeDays,leaveDays:r.leaveDays||[],status:"Submitted",submittedAt:(new Date).toISOString(),createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()},this.workFromOfficeDays=r.workFromOfficeDays,this.workFromHomeDays=r.workFromHomeDays,this.leaveDays=r.leaveDays||[],this.rosterAssignedLeaves=r.leaveDays||[],this.validateRoster(),console.log("Current roster after creation:",this.currentRoster)},error:s=>{console.error("Error submitting roster:",s),this.toastr.error("Failed to submit roster. Please try again.","Error")}})}saveDraft(){const t=this.authService.getCurrentUser();if(!t)return void this.toastr.error("User not authenticated");const r={userId:t.id,weekStartDate:this.weekStartDate.toISOString().split("T")[0],weekEndDate:this.weekEndDate.toISOString().split("T")[0],workFromOfficeDays:this.workFromOfficeDays,workFromHomeDays:this.workFromHomeDays,leaveDays:this.leaveDays||[]};this.currentRoster?this.rostersService.updateRoster(this.currentRoster.id,{...r,status:"Draft"}).subscribe({next:s=>{this.toastr.success("Draft saved successfully"),this.loadCurrentRoster()},error:s=>{console.error("Error saving draft:",s),this.toastr.error("Failed to save draft")}}):this.rostersService.createRoster({...r,leaveDays:r.leaveDays||[],status:"Draft"}).subscribe({next:s=>{this.toastr.success("Draft saved successfully"),this.loadCurrentRoster()},error:s=>{console.error("Error saving draft:",s),this.toastr.error("Failed to save draft")}})}applyDefaultSchedule(){this.workFromOfficeDays=[],this.workFromHomeDays=[],this.rosterAssignedLeaves=[];const t=this.weekDays.filter(i=>{const c=new Date(i.date).getDay();return 0!==c&&6!==c&&!this.isHoliday(i.date)&&!this.leaveDays.includes(i.date)}),r=this.leaveDays.length;let s=3,o=2;0===r?(s=3,o=2):1===r?(s=3,o=1):2===r?(s=3,o=0):r>=3&&(s=t.length,o=0);for(let i=0;i<Math.min(s,t.length);i++)this.workFromOfficeDays.push(t[i].date);const l=t.slice(s);for(let i=0;i<Math.min(o,l.length);i++)this.workFromHomeDays.push(l[i].date);this.validateRoster(),this.toastr.success("Business rules applied: "+r+" leave days \u2192 "+s+" WFO + "+o+" WFH")}copyFromPreviousWeek(){const t=new Date(this.weekStartDate);t.setDate(this.weekStartDate.getDate()-7);const r=t.toISOString().split("T")[0];this.rostersService.getRostersByWeek(r).subscribe({next:s=>{const o=Array.isArray(s)?s[0]:s.data;o?(this.workFromOfficeDays=o.workFromOfficeDays||[],this.workFromHomeDays=o.workFromHomeDays||[],this.leaveDays=o.leaveDays||[],this.validateRoster(),this.toastr.success("Copied from previous week")):this.toastr.warning("No roster found for previous week")},error:s=>{console.error("Error copying from previous week:",s),this.toastr.error("Failed to copy from previous week")}})}viewMemberRoster(t){const r=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];let s="";t.workFromOfficeDays.forEach(l=>{const i=new Date(l),c=r[i.getDay()];s+=`\u2022 ${c} (${i.toLocaleDateString()}): Work From Office\n`}),t.workFromHomeDays.forEach(l=>{const i=new Date(l),c=r[i.getDay()];s+=`\u2022 ${c} (${i.toLocaleDateString()}): Work From Home\n`}),t.leaveDays.forEach(l=>{const i=new Date(l),c=r[i.getDay()];s+=`\u2022 ${c} (${i.toLocaleDateString()}): Leave\n`});const o=`Roster Details for ${t.userName}:\n    \nStatus: ${t.status}\nWFO Days: ${t.workFromOfficeDays.length}/3\nWFH Days: ${t.workFromHomeDays.length}/2\nLeave Days: ${t.leaveDays.length}\n\nSchedule:\n${s}\n\nSubmitted: ${t.submittedAt?new Date(t.submittedAt).toLocaleString():"Not submitted"}`;this.toastr.info(o,`${t.userName}'s Roster`,{timeOut:0,extendedTimeOut:0,closeButton:!0,progressBar:!1})}viewAllRoster(t){this.toastr.info(`Viewing ${t.userName}'s roster`)}approveRoster(t){const r=this.authService.getCurrentUser();r?this.rostersService.approveRoster(t,r.id,`${r.firstName} ${r.lastName}`).subscribe({next:s=>{this.toastr.success("Roster approved successfully"),this.loadAllRosters()},error:s=>{console.error("Error approving roster:",s),this.toastr.error("Failed to approve roster")}}):this.toastr.error("User not authenticated")}rejectRoster(t){if(prompt("Please provide a reason for rejection:")){const s=this.authService.getCurrentUser();if(!s)return void this.toastr.error("User not authenticated");this.rostersService.rejectRoster(t,s.id,`${s.firstName} ${s.lastName}`).subscribe({next:o=>{this.toastr.success("Roster rejected successfully"),this.loadAllRosters()},error:o=>{console.error("Error rejecting roster:",o),this.toastr.error("Failed to reject roster")}})}}previousWeek(){const t=new Date(this.weekStartDate);t.setDate(this.weekStartDate.getDate()-7),this.weekStartDate=t;const r=new Date(this.weekEndDate);r.setDate(this.weekEndDate.getDate()-7),this.weekEndDate=r,this.generateWeekDays(),this.loadCurrentRoster(),this.loadTeamMemberRosters(),this.loadAllRosters(),this.cdr.detectChanges()}nextWeek(){const t=new Date(this.weekStartDate);t.setDate(this.weekStartDate.getDate()+7),this.weekStartDate=t;const r=new Date(this.weekEndDate);r.setDate(this.weekEndDate.getDate()+7),this.weekEndDate=r,this.generateWeekDays(),this.loadCurrentRoster(),this.loadTeamMemberRosters(),this.loadAllRosters(),this.cdr.detectChanges()}currentWeek(){this.initializeWeek(),this.loadCurrentRoster(),this.loadTeamMemberRosters(),this.loadAllRosters()}getWeekStartDate(){return this.weekStartDate}getWeekEndDate(){return this.weekEndDate}viewMyRoster(){if(!this.currentRoster)return void this.toastr.warning("No roster found to view");const t=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];let r="";this.currentRoster.workFromOfficeDays.forEach(o=>{const l=new Date(o),i=t[l.getDay()];r+=`\u2022 ${i} (${l.toLocaleDateString()}): Work From Office\n`}),this.currentRoster.workFromHomeDays.forEach(o=>{const l=new Date(o),i=t[l.getDay()];r+=`\u2022 ${i} (${l.toLocaleDateString()}): Work From Home\n`}),this.currentRoster.leaveDays.forEach(o=>{const l=new Date(o),i=t[l.getDay()];r+=`\u2022 ${i} (${l.toLocaleDateString()}): Leave\n`});const s=`Your Submitted Roster for Week of ${this.weekStartDate.toLocaleDateString()} - ${this.weekEndDate.toLocaleDateString()}:\n\nStatus: ${this.currentRoster.status}\nSubmitted: ${this.currentRoster.submittedAt?new Date(this.currentRoster.submittedAt).toLocaleString():"Not available"}\n\nSchedule:\n${r}\n\nSummary:\n\u2022 Work From Office: ${this.currentRoster.workFromOfficeDays.length} days\n\u2022 Work From Home: ${this.currentRoster.workFromHomeDays.length} days\n\u2022 Leave Days: ${this.currentRoster.leaveDays.length} days`;this.toastr.info(s,"Your Submitted Roster",{timeOut:0,extendedTimeOut:0,closeButton:!0,progressBar:!1})}resubmitRoster(){this.currentRoster?(this.currentRoster.status="Draft",this.toastr.info("Roster status reset to Draft. You can now modify and resubmit.","Ready to Resubmit")):this.toastr.warning("No roster found to resubmit")}debugRosterStatus(){console.log("=== ROSTER DEBUG INFO ==="),console.log("Current Roster:",this.currentRoster),console.log("Week Start Date:",this.weekStartDate),console.log("Week End Date:",this.weekEndDate),console.log("Work From Office Days:",this.workFromOfficeDays),console.log("Work From Home Days:",this.workFromHomeDays),console.log("Leave Days:",this.leaveDays),console.log("Validation Messages:",this.validationMessages),console.log("Can Submit:",this.canSubmit()),console.log("========================"),this.toastr.info("Check browser console for roster debug information","Debug Info")}refreshRoster(){this.toastr.info("Refreshing roster data...","Refresh"),this.loadCurrentRoster(),this.loadTeamMemberRosters(),this.loadAllRosters()}getRosterSummaryText(){const t=this.workFromOfficeDays.length,r=this.workFromHomeDays.length,s=this.leaveDays.length;let o="";return t>0&&(o+=`${t} WFO day${t>1?"s":""}`),r>0&&(o&&(o+=", "),o+=`${r} WFH day${r>1?"s":""}`),s>0&&(o&&(o+=", "),o+=`${s} leave day${s>1?"s":""}`),o||(o="No days assigned"),o}getDetailedRosterBreakdown(){return{workFromOffice:{count:this.workFromOfficeDays.length,required:this.getRequiredWFO(),days:this.workFromOfficeDays.map(t=>({date:t,formatted:new Date(t).toLocaleDateString("en-US",{weekday:"short",month:"short",day:"numeric"})}))},workFromHome:{count:this.workFromHomeDays.length,required:this.getRequiredWFH(),days:this.workFromHomeDays.map(t=>({date:t,formatted:new Date(t).toLocaleDateString("en-US",{weekday:"short",month:"short",day:"numeric"})}))},leave:{count:this.leaveDays.length,days:this.leaveDays.map(t=>({date:t,formatted:new Date(t).toLocaleDateString("en-US",{weekday:"short",month:"short",day:"numeric"}),isApproved:this.isLeaveFromLeaveManagement(t)}))},totalAssigned:this.workFromOfficeDays.length+this.workFromHomeDays.length+this.leaveDays.length,isValid:0===this.validationMessages.length}}static{this.\u0275fac=function(r){return new(r||a)(e.rXU(F.w),e.rXU(R),e.rXU(w.e),e.rXU(_.u),e.rXU(S.tw),e.rXU(e.gRc))}}static{this.\u0275cmp=e.VBU({type:a,selectors:[["app-roster-planner"]],standalone:!0,features:[e.aNF],decls:159,vars:55,consts:[[1,"container-fluid"],[1,"row","mb-4"],[1,"col-12"],[1,"d-flex","justify-content-between","align-items-center"],[1,"text-muted","mb-0"],[1,"d-flex","gap-2"],[1,"btn","btn-outline-secondary",3,"click"],[1,"bi","bi-chevron-left"],[1,"btn","btn-outline-primary",3,"click"],[1,"bi","bi-chevron-right"],["class","row mb-4",4,"ngIf"],[1,"card"],[1,"card-header"],[1,"card-title","mb-0"],[1,"card-body"],["class","row mb-3",4,"ngIf"],[1,"card","border-primary"],[1,"card-header","bg-primary","text-white"],[1,"mb-0"],[1,"bi","bi-calendar-check","me-2"],[1,"text-white-50"],[1,"row","mb-3"],[1,"col-md-4","text-center"],[1,"progress","mb-2",2,"height","25px"],["role","progressbar",1,"progress-bar","bg-primary"],[1,"text-primary"],["class","col-md-4 text-center",4,"ngIf"],["role","progressbar",1,"progress-bar","bg-warning"],[1,"text-warning"],[1,"row"],[1,"col-md-4"],[1,"card-header","bg-primary","text-white","py-2"],[1,"bi","bi-building","me-1"],[1,"card-body","p-2"],["class","text-muted small",4,"ngIf"],["class","mb-1",4,"ngFor","ngForOf"],[1,"card","border-success"],[1,"card-header","bg-success","text-white","py-2"],[1,"bi","bi-house","me-1"],[1,"card","border-warning"],[1,"card-header","bg-warning","text-dark","py-2"],[1,"bi","bi-calendar-x","me-1"],["class","row mt-3",4,"ngIf"],[1,"col-md-12","col-lg-10","mx-auto"],["class","col-md-6 col-lg-3 mb-3",4,"ngFor","ngForOf"],[1,"row","mt-3"],[1,"card","border-info"],[1,"card-header","bg-info","text-white"],[1,"bi","bi-info-circle","me-2"],[1,"col-md-6"],[1,"text-center"],[1,"alert"],[4,"ngIf"],[1,"row","mt-4"],[1,"d-flex","gap-2","flex-wrap"],["class","btn btn-primary",3,"disabled","click",4,"ngIf"],["class","btn btn-secondary",3,"click",4,"ngIf"],["class","btn btn-outline-primary",3,"click",4,"ngIf"],["class","btn btn-outline-secondary",3,"click",4,"ngIf"],["class","btn btn-outline-info",3,"click",4,"ngIf"],["class","btn btn-warning",3,"click",4,"ngIf"],[1,"btn","btn-outline-dark",3,"click"],[1,"bi","bi-bug"],[1,"bi","bi-arrow-clockwise"],[1,"btn","btn-outline-info",3,"click"],[1,"bi","bi-calendar-check"],[1,"table-responsive"],[1,"table","table-striped"],[4,"ngFor","ngForOf"],["class","text-center text-muted py-4",4,"ngIf"],["class","badge bg-primary me-1",4,"ngFor","ngForOf"],["class","badge bg-success me-1",4,"ngFor","ngForOf"],[1,"badge"],[1,"btn-group"],[1,"btn","btn-sm","btn-outline-primary",3,"click"],[1,"bi","bi-eye"],["class","btn btn-sm btn-outline-success",3,"click",4,"ngIf"],["class","btn btn-sm btn-outline-danger",3,"click",4,"ngIf"],[1,"badge","bg-primary","me-1"],[1,"badge","bg-success","me-1"],[1,"btn","btn-sm","btn-outline-success",3,"click"],[1,"bi","bi-check"],[1,"btn","btn-sm","btn-outline-danger",3,"click"],[1,"bi","bi-x"],[1,"text-center","text-muted","py-4"],[1,"bi","bi-calendar3","fs-1"],[1,"mt-2"],[1,"col-12","text-center"],["role","status",1,"spinner-border","text-primary"],[1,"visually-hidden"],["role","progressbar",1,"progress-bar","bg-success"],[1,"text-success"],[1,"text-muted","small"],[1,"mb-1"],[1,"badge","bg-primary"],[1,"badge","bg-success"],[1,"badge",3,"ngClass"],[1,"alert","alert-warning","py-2"],[1,"bi","bi-exclamation-triangle","me-1"],[1,"mb-0","mt-1","small"],[1,"alert","alert-success","py-2"],[1,"bi","bi-check-circle","me-1"],[1,"col-md-6","col-lg-3","mb-3"],[1,"day-card",3,"click"],[1,"day-header"],[1,"day-status"],["class","badge bg-danger",4,"ngIf"],["class","badge bg-secondary",4,"ngIf"],["class","badge bg-primary",4,"ngIf"],["class","badge bg-success",4,"ngIf"],["class","badge",3,"ngClass",4,"ngIf"],["class","badge bg-light text-dark",4,"ngIf"],[1,"badge","bg-danger"],[1,"badge","bg-secondary"],[1,"badge","bg-light","text-dark"],[1,"bi","bi-check-circle","me-2"],[1,"bi","bi-pencil","me-2"],[1,"bi","bi-check-circle-fill","me-2"],[1,"bi","bi-x-circle","me-2"],[1,"bi","bi-calendar-plus","me-2"],[1,"alert","alert-info"],[1,"bi","bi-robot","me-2"],[1,"alert","alert-warning"],[1,"btn","btn-primary",3,"click","disabled"],[1,"bi","bi-send"],[1,"btn","btn-secondary",3,"click"],[1,"bi","bi-save"],[1,"bi","bi-calendar3"],[1,"btn","btn-warning",3,"click"],[1,"bi","bi-arrow-repeat"]],template:function(r,s){1&r&&(e.j41(0,"div",0)(1,"div",1)(2,"div",2)(3,"div",3)(4,"div")(5,"h2"),e.EFF(6,"Roster Planner"),e.k0s(),e.j41(7,"p",4),e.EFF(8),e.k0s()(),e.j41(9,"div",5)(10,"button",6),e.bIt("click",function(){return s.previousWeek()}),e.nrm(11,"i",7),e.EFF(12," Previous "),e.k0s(),e.j41(13,"button",8),e.bIt("click",function(){return s.currentWeek()}),e.EFF(14," This Week "),e.k0s(),e.j41(15,"button",6),e.bIt("click",function(){return s.nextWeek()}),e.EFF(16," Next "),e.nrm(17,"i",9),e.k0s()()()()(),e.DNE(18,I,26,2,"div",10),e.j41(19,"div",1)(20,"div",2)(21,"div",11)(22,"div",12)(23,"h5",13),e.EFF(24),e.nI1(25,"date"),e.nI1(26,"date"),e.k0s()(),e.j41(27,"div",14),e.DNE(28,H,7,0,"div",15),e.j41(29,"div",1)(30,"div",2)(31,"div",16)(32,"div",17)(33,"div",3)(34,"h6",18),e.nrm(35,"i",19),e.EFF(36,"My Roster Summary"),e.k0s(),e.j41(37,"small",20),e.EFF(38),e.k0s()()(),e.j41(39,"div",14)(40,"div",21)(41,"div",22)(42,"div",23)(43,"div",24),e.EFF(44),e.k0s()(),e.j41(45,"strong",25),e.EFF(46,"Work From Office"),e.k0s()(),e.DNE(47,T,6,4,"div",26),e.j41(48,"div",22)(49,"div",23)(50,"div",27),e.EFF(51),e.k0s()(),e.j41(52,"strong",28),e.EFF(53,"Leave Days"),e.k0s()()(),e.j41(54,"div",29)(55,"div",30)(56,"div",16)(57,"div",31)(58,"small"),e.nrm(59,"i",32),e.EFF(60),e.k0s()(),e.j41(61,"div",33),e.DNE(62,M,2,0,"div",34)(63,L,4,4,"div",35),e.k0s()()(),e.j41(64,"div",30)(65,"div",36)(66,"div",37)(67,"small"),e.nrm(68,"i",38),e.EFF(69),e.k0s()(),e.j41(70,"div",33),e.DNE(71,P,2,0,"div",34)(72,A,4,4,"div",35),e.k0s()()(),e.j41(73,"div",30)(74,"div",39)(75,"div",40)(76,"small"),e.nrm(77,"i",41),e.EFF(78),e.k0s()(),e.j41(79,"div",33),e.DNE(80,N,2,0,"div",34)(81,x,5,6,"div",35),e.k0s()()()(),e.DNE(82,U,8,1,"div",42)(83,V,6,0,"div",42),e.k0s()()()(),e.j41(84,"div",29)(85,"div",2)(86,"div",29)(87,"div",43)(88,"div",29),e.DNE(89,Q,16,24,"div",44),e.k0s()()()()(),e.j41(90,"div",45)(91,"div",2)(92,"div",46)(93,"div",47)(94,"h6",13),e.nrm(95,"i",48),e.EFF(96,"Business Rules"),e.k0s()(),e.j41(97,"div",14)(98,"div",29)(99,"div",49)(100,"h6"),e.EFF(101,"Default Schedule:"),e.k0s(),e.j41(102,"ul",18)(103,"li")(104,"strong"),e.EFF(105,"Minimum 3 WFO days"),e.k0s(),e.EFF(106," (Work From Office)"),e.k0s(),e.j41(107,"li")(108,"strong"),e.EFF(109,"Maximum 2 WFH days"),e.k0s(),e.EFF(110," (Work From Home)"),e.k0s(),e.j41(111,"li")(112,"em"),e.EFF(113,"You can assign more WFO days if needed"),e.k0s()()()(),e.j41(114,"div",49)(115,"h6"),e.EFF(116,"When Taking Leave:"),e.k0s(),e.j41(117,"ul",18)(118,"li")(119,"strong"),e.EFF(120,"1 day leave:"),e.k0s(),e.EFF(121," Min 3 WFO + Max 1 WFH"),e.k0s(),e.j41(122,"li")(123,"strong"),e.EFF(124,"2 days leave:"),e.k0s(),e.EFF(125," Min 3 WFO + 0 WFH"),e.k0s(),e.j41(126,"li")(127,"strong"),e.EFF(128,"3+ days leave:"),e.k0s(),e.EFF(129," All remaining days as WFO"),e.k0s()()()()()()()(),e.j41(130,"div",45)(131,"div",2)(132,"div",50)(133,"div",51),e.DNE(134,Z,7,0,"div",52)(135,ee,7,0,"div",52)(136,te,7,0,"div",52)(137,se,7,0,"div",52)(138,re,7,0,"div",52),e.k0s()()()(),e.DNE(139,ae,10,0,"div",42)(140,ne,7,1,"div",42),e.j41(141,"div",53)(142,"div",2)(143,"div",54),e.DNE(144,ie,3,1,"button",55)(145,le,3,0,"button",56)(146,ce,3,0,"button",57)(147,de,3,0,"button",58)(148,ue,3,0,"button",59)(149,me,3,0,"button",60),e.j41(150,"button",61),e.bIt("click",function(){return s.debugRosterStatus()}),e.nrm(151,"i",62),e.EFF(152," Debug Info "),e.k0s(),e.j41(153,"button",6),e.bIt("click",function(){return s.refreshRoster()}),e.nrm(154,"i",63),e.EFF(155," Refresh "),e.k0s(),e.j41(156,"button",64),e.bIt("click",function(){return s.refreshAppliedLeaves()}),e.nrm(157,"i",65),e.EFF(158," Refresh Applied Leaves "),e.k0s()()()()()()()()()),2&r&&(e.R7$(8),e.SpI(" ",s.getRoleSpecificMessage()," "),e.R7$(10),e.Y8G("ngIf",s.authService.isAdmin()),e.R7$(6),e.Lme("My Roster - Week of ",e.i5U(25,49,s.weekStartDate,"MMM dd, yyyy")," - ",e.i5U(26,52,s.weekEndDate,"MMM dd, yyyy"),""),e.R7$(4),e.Y8G("ngIf",s.isLoading),e.R7$(10),e.JRh(s.getRosterSummaryText()),e.R7$(5),e.xc7("width",s.workFromOfficeDays.length/s.getRequiredWFO()*100,"%"),e.R7$(),e.Lme(" ",s.workFromOfficeDays.length,"/",s.getRequiredWFO()," "),e.R7$(3),e.Y8G("ngIf",s.getRequiredWFH()>0),e.R7$(3),e.xc7("width",s.leaveDays.length/5*100,"%"),e.R7$(),e.SpI(" ",s.leaveDays.length," Days "),e.R7$(9),e.SpI("Work From Office (",s.workFromOfficeDays.length,")"),e.R7$(2),e.Y8G("ngIf",0===s.workFromOfficeDays.length),e.R7$(),e.Y8G("ngForOf",s.workFromOfficeDays),e.R7$(6),e.SpI("Work From Home (",s.workFromHomeDays.length,")"),e.R7$(2),e.Y8G("ngIf",0===s.workFromHomeDays.length),e.R7$(),e.Y8G("ngForOf",s.workFromHomeDays),e.R7$(6),e.SpI("Leave Days (",s.leaveDays.length,")"),e.R7$(2),e.Y8G("ngIf",0===s.leaveDays.length),e.R7$(),e.Y8G("ngForOf",s.leaveDays),e.R7$(),e.Y8G("ngIf",s.validationMessages.length>0),e.R7$(),e.Y8G("ngIf",0===s.validationMessages.length&&(s.workFromOfficeDays.length>0||s.workFromHomeDays.length>0)),e.R7$(6),e.Y8G("ngForOf",s.weekDays),e.R7$(44),e.AVh("alert-success","Submitted"===(null==s.currentRoster?null:s.currentRoster.status))("alert-warning","Draft"===(null==s.currentRoster?null:s.currentRoster.status))("alert-info","Approved"===(null==s.currentRoster?null:s.currentRoster.status))("alert-danger","Rejected"===(null==s.currentRoster?null:s.currentRoster.status))("alert-secondary",!s.currentRoster),e.R7$(),e.Y8G("ngIf","Submitted"===(null==s.currentRoster?null:s.currentRoster.status)),e.R7$(),e.Y8G("ngIf","Draft"===(null==s.currentRoster?null:s.currentRoster.status)),e.R7$(),e.Y8G("ngIf","Approved"===(null==s.currentRoster?null:s.currentRoster.status)),e.R7$(),e.Y8G("ngIf","Rejected"===(null==s.currentRoster?null:s.currentRoster.status)),e.R7$(),e.Y8G("ngIf",!s.currentRoster),e.R7$(),e.Y8G("ngIf",null==s.currentRoster?null:s.currentRoster.isSystemGenerated),e.R7$(),e.Y8G("ngIf",s.validationMessages.length>0),e.R7$(4),e.Y8G("ngIf",!s.currentRoster||"Draft"===s.currentRoster.status),e.R7$(),e.Y8G("ngIf",!s.currentRoster||"Draft"===s.currentRoster.status),e.R7$(),e.Y8G("ngIf",!s.currentRoster||"Draft"===s.currentRoster.status),e.R7$(),e.Y8G("ngIf",!s.currentRoster||"Draft"===s.currentRoster.status),e.R7$(),e.Y8G("ngIf",s.currentRoster&&"Submitted"===s.currentRoster.status),e.R7$(),e.Y8G("ngIf",s.currentRoster&&"Rejected"===s.currentRoster.status))},dependencies:[g.MD,g.YU,g.Sq,g.bT,g.vh,D.YN],styles:[".day-card[_ngcontent-%COMP%]{border:2px solid #e9ecef;border-radius:8px;padding:1rem;text-align:center;cursor:pointer;transition:all .3s ease;margin-bottom:1rem;min-height:120px;display:flex;flex-direction:column;justify-content:space-between}.day-card[_ngcontent-%COMP%]:hover{border-color:#007bff;transform:translateY(-2px);box-shadow:0 4px 8px #0000001a}.day-card.holiday[_ngcontent-%COMP%]{background-color:#f8d7da;border-color:#dc3545;cursor:not-allowed}.day-card.weekend[_ngcontent-%COMP%]{background-color:#f8f9fa;border-color:#6c757d;cursor:not-allowed;opacity:.7}.day-card.selected-wfo[_ngcontent-%COMP%]{background-color:#cce7ff;border-color:#007bff}.day-card.selected-wfh[_ngcontent-%COMP%]{background-color:#d4edda;border-color:#28a745}.day-card.selected-leave[_ngcontent-%COMP%]{background-color:#fff3cd;border-color:#ffc107}.day-header[_ngcontent-%COMP%]{margin-bottom:.5rem}.day-header[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{display:block;font-size:1.1rem}.day-header[_ngcontent-%COMP%]   small[_ngcontent-%COMP%]{color:#6c757d}.day-status[_ngcontent-%COMP%]{margin-top:auto}.badge[_ngcontent-%COMP%]{font-size:.75rem}.stats-card[_ngcontent-%COMP%]{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border-radius:10px;padding:1.5rem;box-shadow:0 4px 6px #0000001a}.stats-number[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;margin-bottom:.25rem}.stats-label[_ngcontent-%COMP%]{font-size:.9rem;opacity:.9}"]})}}return a})()}}]);